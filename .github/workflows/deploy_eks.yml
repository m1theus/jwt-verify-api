on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  EKS_CLUSTER_NAME: ${{ vars.EKS_CLUSTER_NAME }}

name: Build and Push Image to ECR

jobs:
  build-app:
    runs-on: ubuntu-latest
    name: Build APP
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build
        run: ./gradlew clean build -x test

      - name: Tests
        run: ./gradlew test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Extract branch name and timestamp
        shell: bash
        run: |
          echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=timestamp::$(date +%s)"
          echo "::set-output name=sha_short::${GITHUB_SHA::8}"
        id: extract_branch

      - name: Build, tag, and push application image to Amazon ECR
        id: build-application-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: jwt-verify-api
          IMAGE_TAG: ${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.sha_short }}-${{ steps.extract_branch.outputs.timestamp }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}  --kubeconfig ./kubeconfig
          echo 'KUBE_CONFIG_DATA<<EOF' >> $GITHUB_ENV
          echo $(cat ./kubeconfig | base64) >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: helm deploy
        uses: koslib/helm-eks-action@master
        env:
          KUBE_CONFIG_DATA: ${{ env.KUBE_CONFIG_DATA }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: jwt-verify-api
          IMAGE_TAG: ${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.sha_short }}-${{ steps.extract_branch.outputs.timestamp }}
        with:
          command: |
            helm version
            kubectl version
            kubectl cluster-info 
            helm upgrade jwt-verify-api --install --wait --set image.tag=$IMAGE_TAG --set image.repository="$ECR_REGISTRY/$ECR_REPOSITORY" --set service.port="8080" ./k8s/chart/springboot-api -n default

            helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
            helm repo update
            helm upgrade springboot-api-ingress --install --wait ingress-nginx/ingress-nginx -f ./k8s/chart/nginx-controller/values.yaml
